class Solution {
public:
    int m,n;
    bool solve(vector<vector<char>>& board, int i, int j, string &word, int k,  vector<vector<bool>>& vis){
        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != word[k] || vis[i][j])return false;
        if(k == word.size()-1)return true;
        vis[i][j] = true;
        bool found = solve(board, i + 1, j, word, k + 1, vis) ||
                     solve(board, i - 1, j, word, k + 1, vis) ||
                     solve(board, i, j + 1, word, k + 1, vis) ||
                     solve(board, i, j - 1, word, k + 1, vis);
        vis[i][j] = false;

        return found;
    }

    bool exist(vector<vector<char>>& board, string word) {
        ios::sync_with_stdio(0);
		cin.tie(0);
		cout.tie(0);
        m = board.size(), n = board[0].size();
        vector<vector<bool>>vis(m, vector<bool>(n, false));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == word[0])
                {
                    if( solve(board, i, j, word, 0, vis))
                    return true;
                }
                
            }
        }
        return false;
    }
};
