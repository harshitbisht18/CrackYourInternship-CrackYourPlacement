class Solution {
  public:
    vector<vector<int>> valid_next_digits = {
        {0, 8}, {1, 2, 4}, {2, 1, 3, 5}, {3, 2, 6}, {4, 1, 5, 7},
        {5, 2, 4, 6, 8}, {6, 3, 5, 9}, {7, 4, 8}, {8, 5, 7, 9, 0}, {9, 6, 8}
    };

    long long getCount(int n) {
        vector<long long> count_ending_digits(10, 0);
        vector<long long> previous_counts(10, 1);

        for (int i = 2; i <= n; ++i) {
            for (int digit = 0; digit < 10; ++digit) {
                for (int next_digit : valid_next_digits[digit]) {
                    count_ending_digits[next_digit] += previous_counts[digit];
                }
            }
            previous_counts = count_ending_digits;
            fill(count_ending_digits.begin(), count_ending_digits.end(), 0);
        }

        return accumulate(previous_counts.begin(), previous_counts.end(), 0LL);
    }
};
