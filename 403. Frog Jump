class Solution {
public:
    int n;
    int dp[2001][2001];
    unordered_map<int, int>mp;
     bool solve(const vector<int>& sto, int index, int prev) {
        if (index == n - 1) return true;
        if (dp[index][prev] != -1) return dp[index][prev];
        
        bool res = false;
        for (int next = prev - 1; next <= prev + 1; ++next) {
            if (next > 0) { 
                int nj = sto[index] + next;
                if (mp.find(nj) != mp.end()) {
                    res = res || solve(sto, mp[nj], next);
                }
            }
        }
        
        return dp[index][prev] = res;
    }
    bool canCross(vector<int>& sto) {
        ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
        memset(dp, -1, sizeof(dp));
        if(sto[1] != 1)return false;
        n = sto.size();
        for(int i = 0; i < n; i++){
            mp[sto[i]] = i;
        }
        return solve(sto, 1, 1);}
};
