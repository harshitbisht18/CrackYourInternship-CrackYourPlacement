class Solution
{
    public:
        int ones(string s)
        {
            int count = 0;
            int r = s.size();
            for (int j = 0; j < r; j++)
            {
                if (s[j] == '1') count++;
            }
            return count;
        }
    int findMaxForm(vector<string> &strs, int m, int n)
    {
        ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
        vector<vector<vector< int>>> dp(strs.size() + 1, vector<vector < int>> (m + 1, vector<int> (n + 1, 0)));
        int q = strs.size();
        for (int i = 1; i <= q; i++)
        {
            for (int j = 0; j <= m; j++)
            {
                for (int k = 0; k <= n; k++)
                {
                    int o = ones(strs[i - 1]);
                    int z = strs[i - 1].size() - o;
                    if (z <= j && o <= k)
                    {
                        dp[i][j][k] = max(1 + dp[i - 1][j - z][k - o], dp[i - 1][j][k]);
                    }
                    else dp[i][j][k] = dp[i - 1][j][k];
                }
            }
        }
        return dp[q][m][n];
    }
};
